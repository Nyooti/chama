{"ast":null,"code":"var _jsxFileName = \"/home/nyooti/Desktop/chama/client/src/contexts/NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotifications = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotifications, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const response = await api.get('/notifications');\n      setNotifications(response.data.notifications || []);\n      setUnreadCount(response.data.unreadCount || 0);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      // For now, set empty notifications if API fails\n      setNotifications([]);\n      setUnreadCount(0);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const markAsRead = async notificationId => {\n    try {\n      await api.patch(`/notifications/${notificationId}/read`);\n      setNotifications(prev => prev.map(notification => notification.id === notificationId ? {\n        ...notification,\n        read: true\n      } : notification));\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n  const markAllAsRead = async () => {\n    try {\n      await api.patch('/notifications/read-all');\n      setNotifications(prev => prev.map(notification => ({\n        ...notification,\n        read: true\n      })));\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n    }\n  };\n  const deleteNotification = async notificationId => {\n    try {\n      await api.delete(`/notifications/${notificationId}`);\n      setNotifications(prev => prev.filter(notification => notification.id !== notificationId));\n      // Update unread count if the deleted notification was unread\n      const deletedNotification = notifications.find(n => n.id === notificationId);\n      if (deletedNotification && !deletedNotification.read) {\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      }\n    } catch (error) {\n      console.error('Error deleting notification:', error);\n    }\n  };\n  const addNotification = notification => {\n    const newNotification = {\n      id: Date.now(),\n      // Simple ID generation\n      ...notification,\n      read: false,\n      createdAt: new Date().toISOString()\n    };\n    setNotifications(prev => [newNotification, ...prev]);\n    setUnreadCount(prev => prev + 1);\n\n    // Optional: Send to backend\n    try {\n      api.post('/notifications', newNotification).catch(error => {\n        console.error('Error saving notification to backend:', error);\n      });\n    } catch (error) {\n      // Fail silently for now\n    }\n    return newNotification;\n  };\n  useEffect(() => {\n    // Fetch notifications on component mount\n    fetchNotifications();\n  }, []);\n  const value = {\n    notifications,\n    unreadCount,\n    loading,\n    fetchNotifications,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    addNotification\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"56h3KrDPcQmm4xYT7RSUOonZEGY=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","api","jsxDEV","_jsxDEV","NotificationContext","useNotifications","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","fetchNotifications","response","get","data","error","console","markAsRead","notificationId","patch","prev","map","notification","id","read","Math","max","markAllAsRead","deleteNotification","delete","filter","deletedNotification","find","n","addNotification","newNotification","Date","now","createdAt","toISOString","post","catch","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/nyooti/Desktop/chama/client/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport api from '../utils/api';\n\nconst NotificationContext = createContext();\n\nexport const useNotifications = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotifications must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      const response = await api.get('/notifications');\n      setNotifications(response.data.notifications || []);\n      setUnreadCount(response.data.unreadCount || 0);\n    } catch (error) {\n      console.error('Error fetching notifications:', error);\n      // For now, set empty notifications if API fails\n      setNotifications([]);\n      setUnreadCount(0);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const markAsRead = async (notificationId) => {\n    try {\n      await api.patch(`/notifications/${notificationId}/read`);\n      setNotifications(prev =>\n        prev.map(notification =>\n          notification.id === notificationId\n            ? { ...notification, read: true }\n            : notification\n        )\n      );\n      setUnreadCount(prev => Math.max(0, prev - 1));\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n    }\n  };\n\n  const markAllAsRead = async () => {\n    try {\n      await api.patch('/notifications/read-all');\n      setNotifications(prev =>\n        prev.map(notification => ({ ...notification, read: true }))\n      );\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n    }\n  };\n\n  const deleteNotification = async (notificationId) => {\n    try {\n      await api.delete(`/notifications/${notificationId}`);\n      setNotifications(prev =>\n        prev.filter(notification => notification.id !== notificationId)\n      );\n      // Update unread count if the deleted notification was unread\n      const deletedNotification = notifications.find(n => n.id === notificationId);\n      if (deletedNotification && !deletedNotification.read) {\n        setUnreadCount(prev => Math.max(0, prev - 1));\n      }\n    } catch (error) {\n      console.error('Error deleting notification:', error);\n    }\n  };\n\n  const addNotification = (notification) => {\n    const newNotification = {\n      id: Date.now(), // Simple ID generation\n      ...notification,\n      read: false,\n      createdAt: new Date().toISOString()\n    };\n    \n    setNotifications(prev => [newNotification, ...prev]);\n    setUnreadCount(prev => prev + 1);\n    \n    // Optional: Send to backend\n    try {\n      api.post('/notifications', newNotification).catch(error => {\n        console.error('Error saving notification to backend:', error);\n      });\n    } catch (error) {\n      // Fail silently for now\n    }\n    \n    return newNotification;\n  };\n\n  useEffect(() => {\n    // Fetch notifications on component mount\n    fetchNotifications();\n  }, []);\n\n  const value = {\n    notifications,\n    unreadCount,\n    loading,\n    fetchNotifications,\n    markAsRead,\n    markAllAsRead,\n    deleteNotification,\n    addNotification\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}